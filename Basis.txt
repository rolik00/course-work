1. Рекурсия
Рекурсия – функция, вызывающая саму себя.
Чтобы рекурсия выполнялась, должны выполняться два условия:
– должен существовать хотя бы один базовый случай (случай, когда вычисление происходит непосредственно, без рекурсии);
– каждый рекурсивный вызов должен быть меньшим экземпляром той же задачи, так что в конечном итоге будет достигнут один из базовых случаев.
2. Вычислительная сложность алгоритма
Вычислительная сложность алгоритма – оценка по времени выполнения и по объему используемой памяти алгоритма. Оцениваются ТОЛЬКО корректные алгоритмы – алгоритмы, завершающиеся получением правильного ответа.
Как оценить эффективность алгоритма:
– привязка оценки алгоритма к объему входных данных;
– использование «элементарных» операций (арифметические операции, ввод-вывод, условный оператор, работа с переменными) для подсчета времени работы алгоритма.
– при оценке скорости роста количества операций от размера входных данных можно пренебрегать менее значимыми компонентами и константами. Например, O(5n3+4n+3) ~ O(n3).
3. Алгоритмы поиска
– линейный поиск – алгоритм поиска, при котором массив просматривается последовательно и проверяется каждый элемент. Сложность по времени: O(n).
– бинарный поиск – алгоритм поиска, используемый в отсортированном массиве путем многократного деления интервала поиска пополам. Сложность по времени: O(logn).
Идея поиска заключается в том, чтобы брать элемент посередине, между границами, и сравнивать его с искомым. Если искомое больше, чем элемент сравнения, то сужаем область поиска так, чтобы новая левая граница была равна индексу середины предыдущей области. В противном случае присваиваем это значение правой границе. Проделываем эту процедуру до тех пор, пока правая граница больше.
– экспоненциальный поиск – алгоритм поиска, состоящий из двух этапов:
	– поиск диапазона, в котором присутствует элемент;
	– выполнение двоичного поиска в найденном диапазоне. 
Идея состоит в том, чтобы начать сравнение искомого значения с элементом массива под индексом 1, затем под индексом 2, затем 4 и так далее, пока последний элемент подмассива не станет больше. Как только мы находим индекс i, мы знаем, что элемент должен присутствовать между i/2 и i, и запускаем бинарный поиск.
Сложность по времени: O(logn).
4. Алгоритм поиска подстроки в строке
	Наивный алгоритм
Идея: идти по проверяемой строке T и искать в ней вхождение первого символа искомой строки P. Когда находим, делаем гипотезу, что это и есть то самое искомое вхождение. Затем остается проверять по очереди все последующие символы шаблона на совпадение с соответствующими символами строки T. Если они все совпали — значит мы нашли искомое вхождение. Но если какой-то из символов не совпал, то наша гипотеза не верна, что возвращает нас к символу, следующему за вхождением первого символа из P.
Сложность по времени: O((n – m + 1) * m), где n – длина строки T, m – длина подстроки P.
	Алгоритм Рабина-Карпа
Как и наивный алгоритм, алгоритм Рабина-Карпа также проверяет каждую подстроку. Но в отличие от наивного алгоритма, алгоритм Рабина Карпа сопоставляет хеш-значение шаблона с хеш-значением текущей подстроки текста, и если хеш-значения совпадают, то только он начинает сопоставлять отдельные символы. Таким образом, алгоритм Рабина Карпа должен вычислить хеш-значения для следующих строк.
Хэш-значение используется для эффективной проверки потенциальных совпадений между шаблоном и подстроками более крупного текста. Хеш-значение вычисляется с помощью скользящей хеш-функции, которая позволяет обновить хэш-значение для новой подстроки, эффективно удаляя вклад старого символа и добавляя вклад нового символа. Это дает возможность провести паттерн по тексту и вычислить хеш-значение для каждой подстроки, не пересчитывая весь хеш с нуля.
Сложность по времени: O(n + m), где n – длина строки T, m – длина подстроки P.
	Алгоритм Бойера-Мура
Алгоритм сравнивает символы шаблона P справа налево, начиная с самого правого, один за другим с символами исходной строки T. Если символы совпадают, производится сравнение предпоследнего символа шаблона и так до конца. Если все символы шаблона совпали с наложенными символами строки, значит, подстрока найдена, и поиск окончен. В случае несовпадения какого-либо символа, то мы смещаем шаблон P так, что несовпадающий символ встал на место последнего элемента шаблона.
Сложность по времени: O(n + m), где n – длина строки T, m – длина подстроки P.
	Алгоритм Кнута-Морриса-Паратта
Префикс-функция: 
Пусть дана строка S[0..n], необходимо вычислить для нее префикс-функцию, то есть получить массив p[0..n-1], где p[i] определяется следующим образом: p[i] – наибольшая длина наибольшего собственного суффикса подстроки s[0..i], то есть p[i] = max(k: s[0..k-1] = s[i-k+1..i]). Например, для строки “abcabcd” префикс функция [0, 0, 0, 1, 2, 3, 0].
 
a – 0
ab – 0 
abc – 0
abca – 1
abcab – 2 
abcabc – 3
abcabcd – 0 
 
Алгоритм Кнута-Морриса-Паратта:
Для нахождения образца “aabaa” в строке “aabaaaabaaaaabbaba” склеим образец со строкой, используя разделитель (символ, которого нет ни в строке, ни в образце): 
“aabaa@aabaaaabaaaaabbaba”, и вызовем для получившейся строки префикс-функцию. Ищем в получившемся массиве элементы, равные длине образца, и выводим индексы, под которыми они находятся. Значений, больших длине образца, не будет из-за символа разделителя, а значения, равные длине образца, могут появиться только в позициях, соответствующих образцу.
5. Метод двух указателей
Метод двух указателей - это простой и эффективный метод поиска подотрезка, удовлетворяющего некоторым условиям. 
Базовый принцип
Основная идея метода двух указателей заключается в том, чтобы использовать два указателя (обычно именуемых левый и правый), которые перемещаются по массиву или списку. Эти указатели обычно начинают с противоположных концов массива и двигаются в сторону друг друга, проверяя определенные условия, связанные с задачей. В процессе выполнения алгоритма указатели могут перемещаться в одном или обоих направлениях, а также могут останавливаться на определенных позициях.
